EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
mycode.exe -- emu8086 assembler version: 4.05  
 
[ 07.05.2020  --  1:09:28 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       .stack 100h
[   3]        :                                       .data
[   4]    0100: 45 52 52 4F 52 24                     strError db 'ERROR$'
[   5]    0106: 49 6E 70 75 74 20 61 6D 6F 75 6E 74   greeting db 'Input amount of numbers:$'
                20 6F 66 20 6E 75 6D 62 65 72 73 3A 
                24                                  
[   6]    011F: 49 6E 70 75 74 20 61 20 6E 75 6D 62   strInput db 'Input a number from -32768 to 32767:$'
                65 72 20 66 72 6F 6D 20 2D 33 32 37 
                36 38 20 74 6F 20 33 32 37 36 37 3A 
                24                                  
[   7]    0144: 52 65 70 65 61 74 20 69 6E 70 75 74   strRepeat db 'Repeat input!!!$'
                21 21 21 24                         
[   8]    0154: 52 65 73 75 6C 74 3A 24               result db 'Result:$'
[   9]    015C: 0A 0D 24                              enter db 10, 13, '$'
[  10]    015F: 00 00 00 00 00 00 00 00 00 00 00 00   massiv dw 30 dup (?)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                                                    
[  11]    019B: 07 00 00 00 00 00 00 00 00            i db 7,8 dup(?)
[  12]    01A4: 00                                    povtorenie1 db ?
[  13]    01A5: 00                                    povtorenie2 db ?
[  14]    01A6: 00 00                                 lenght dw ?
[  15]    01A8: 2D 24                                 znak db '-','$'
[  16]    01AA: 00 00                                 number dw ?
[  17]        :                                       .code
[  18]        :                                       
[  19]    01B0:                                       input proc near
[  20]    01B0: B4 0A                                 mov ah, 0ah
[  21]    01B2: BA 9B 00                              mov dx, offset i
[  22]    01B5: CD 21                                 int 21h
[  23]    01B7: C3                                    ret
[  24]        :                                       input endp
[  25]        :                                       
[  26]    01B8:                                       perevod proc near
[  27]    01B8: 33 C0                                 xor ax, ax
[  28]    01BA: 33 D2                                 xor dx, dx
[  29]    01BC: AC                                    lodsb
[  30]    01BD: 50                                    push ax
[  31]    01BE: 3D 2D 00                              cmp ax, '-'
[  32]    01C1: 75 02                                 jne  cycle
[  33]    01C3: 49                                    dec cx
[  34]    01C4: AC                                    lodsb
[  35]    01C5:                                       cycle:
[  36]    01C5: 3D 30 00                              cmp ax, '0'
[  37]    01C8: 72 22                                 jb error
[  38]    01CA: 3D 39 00                              cmp ax, '9'
[  39]    01CD: 77 1D                                 ja error
[  40]    01CF: 2D 30 00                              sub ax,'0'
[  41]    01D2: 50                                    push ax
[  42]    01D3: 8B 45 5F                              mov ax, massiv[di]
[  43]    01D6: F7 E3                                 mul bx
[  44]    01D8: 89 45 5F                              mov massiv[di], ax
[  45]    01DB: 58                                    pop ax
[  46]    01DC: 01 45 5F                              add massiv[di], ax
[  47]    01DF: 70 0B                                 jo error
[  48]    01E1: AC                                    lodsb
[  49]    01E2: E2 E1                                 loop cycle
[  50]    01E4: 58                                    pop ax
[  51]    01E5: 3D 2D 00                              cmp ax, '-'
[  52]    01E8: 74 1B                                 je minus
[  53]    01EA: EB 29                                 jmp endPerevod
[  54]    01EC:                                       error:
[  55]    01EC: 58                                    pop ax
[  56]    01ED: 3D 2D 00                              cmp ax, '-'
[  57]    01F0: 74 13                                 je minus
[  58]    01F2:                                       error1:
[  59]    01F2: B4 09                                 mov ah, 09h
[  60]    01F4: BA 5C 00                              lea dx, enter
[  61]    01F7: CD 21                                 int 21h
[  62]    01F9: B4 09                                 mov ah, 09h
[  63]    01FB: BA 00 00                              lea dx, strError
[  64]    01FE: CD 21                                 int 21h
[  65]    0200: BA 01 00                              mov dx, 1
[  66]    0203: EB 10                                 jmp endPerevod
[  67]    0205:                                       minus:
[  68]    0205: F7 55 5F                              not massiv[di]
[  69]    0208: 83 45 5F 01                           add massiv[di], 1
[  70]    020C: 81 7D 5F 00 80                        cmp massiv[di], -32768
[  71]    0211: 78 DF                                 js error1
[  72]    0213: EB 00                                 jmp endPerevod
[  73]    0215:                                       endPerevod:
[  74]    0215: C3                                    ret
[  75]        :                                       perevod endp
[  76]        :                                       
[  77]    0216:                                       seach proc near
[  78]    0216: C6 06 A4 00 00                        mov povtorenie1, 0
[  79]    021B: 8B 0E A6 00                           mov cx, lenght
[  80]    021F:                                       go:
[  81]    021F: 33 C0                                 xor ax, ax
[  82]    0221: 8B 44 5F                              mov ax, massiv[si]
[  83]    0224: F2 AF                                 repne scasw
[  84]    0226: 74 02                                 je @step
[  85]    0228: E3 0C                                 jcxz my_ret
[  86]    022A:                                       @step:
[  87]    022A: FE 06 A4 00                           inc povtorenie1
[  88]    022E: 8A 16 A4 00                           mov dl, povtorenie1
[  89]    0232: E3 02                                 jcxz my_ret
[  90]    0234: EB E9                                 jmp go
[  91]    0236:                                       my_ret:
[  92]    0236: 46                                    inc si
[  93]    0237: 46                                    inc si
[  94]    0238: C3                                    ret
[  95]        :                                       seach endp
[  96]        :                                       
[  97]    0239:                                       DecToASCII proc near
[  98]    0239:                                       @b:
[  99]    0239: F7 F3                                 div bx
[ 100]    023B: 83 C2 30                              add dx, '0'
[ 101]    023E: 52                                    push dx
[ 102]    023F: 41                                    inc cx
[ 103]    0240: 33 D2                                 xor dx, dx
[ 104]    0242: 3D 00 00                              cmp ax, 0
[ 105]    0245: 75 F2                                 jne @b
[ 106]    0247:                                       @a:
[ 107]    0247: 5B                                    pop bx
[ 108]    0248: 88 9C 9D 00                           mov i[si+2], bl
[ 109]    024C: 46                                    inc si
[ 110]    024D: E2 F8                                 loop @a
[ 111]    024F: C6 84 9D 00 24                        mov i[si+2], '$'
[ 112]    0254: C3                                    ret
[ 113]        :                                       DecToASCII endp
[ 114]        :                                       
[ 115]    0255:                                       main:
[ 116]    0255: B8 10 00                              mov ax,@data
[ 117]    0258: 8E D8                                 mov ds, ax
[ 118]    025A: 8E C0                                 mov es, ax
[ 119]    025C:                                       start:
[ 120]    025C: B4 09                                 mov ah, 09h
[ 121]    025E: BA 5C 00                              lea dx, enter
[ 122]    0261: CD 21                                 int 21h
[ 123]    0263: C7 45 5F 00 00                        mov massiv[di], 0
[ 124]    0268: BF 00 00                              mov di, 0
[ 125]    026B: B4 09                                 mov ah, 09h
[ 126]    026D: BA 06 00                              lea dx, greeting
[ 127]    0270: CD 21                                 int 21h
[ 128]    0272: E8 3B FF                              call input
[ 129]    0275: BE 9D 00                              lea si, i+2
[ 130]    0278: BB 0A 00                              mov bx, 10
[ 131]    027B: 33 C9                                 xor cx, cx
[ 132]    027D: 8A 0E 9C 00                           mov cl, i[1]
[ 133]    0281: E8 34 FF                              call perevod
[ 134]    0284: 03 4D 5F                              add cx, massiv[di]
[ 135]    0287: 78 D3                                 js start
[ 136]    0289: 33 C9                                 xor cx, cx
[ 137]    028B: 8B 45 5F                              mov ax, massiv[di]
[ 138]    028E: C7 45 5F 00 00                        mov massiv[di], 0
[ 139]    0293: A3 A6 00                              mov lenght, ax
[ 140]    0296: BB 1E 00                              mov bx, 30
[ 141]    0299: 3B 1E A6 00                           cmp bx, lenght
[ 142]    029D: 7C BD                                 jl start
[ 143]    029F: BB 00 00                              mov bx, 0
[ 144]    02A2: 3B 1E A6 00                           cmp bx, lenght
[ 145]    02A6: 74 B4                                 je start
[ 146]    02A8: 8B 0E A6 00                           mov cx, lenght
[ 147]    02AC: BF 00 00                              mov di, 0
[ 148]    02AF: C6 06 A5 00 00                        mov povtorenie2, 0
[ 149]    02B4: EB 15                                 jmp main1
[ 150]    02B6:                                       povtor:
[ 151]    02B6: B4 09                                 mov ah, 09h
[ 152]    02B8: BA 5C 00                              lea dx, enter
[ 153]    02BB: CD 21                                 int 21h
[ 154]    02BD: B4 09                                 mov ah, 09h
[ 155]    02BF: BA 44 00                              lea dx, strRepeat
[ 156]    02C2: CD 21                                 int 21h
[ 157]    02C4: 4F                                    dec di
[ 158]    02C5: 4F                                    dec di
[ 159]    02C6: C7 45 5F 00 00                        mov massiv[di], 0
[ 160]    02CB:                                       main1:
[ 161]    02CB: 51                                    push cx
[ 162]    02CC: B4 09                                 mov ah, 09h
[ 163]    02CE: BA 5C 00                              lea dx, enter
[ 164]    02D1: CD 21                                 int 21h
[ 165]    02D3: B4 09                                 mov ah, 09h
[ 166]    02D5: BA 1F 00                              lea dx, strInput
[ 167]    02D8: CD 21                                 int 21h
[ 168]    02DA: E8 D3 FE                              call input
[ 169]    02DD: BE 9D 00                              lea si, i+2
[ 170]    02E0: BB 0A 00                              mov bx, 10
[ 171]    02E3: 8A 0E 9C 00                           mov cl, i[1]
[ 172]    02E7: E8 CE FE                              call perevod
[ 173]    02EA: 59                                    pop cx
[ 174]    02EB: 47                                    inc di
[ 175]    02EC: 47                                    inc di
[ 176]    02ED: 83 FA 01                              cmp dx, 1
[ 177]    02F0: 74 C4                                 je povtor
[ 178]    02F2: E2 D7                                 loop main1
[ 179]    02F4: 8B 0E A6 00                           mov cx, lenght
[ 180]    02F8: C6 06 A4 00 00                        mov povtorenie1, 0
[ 181]    02FD: 33 F6                                 xor si, si
[ 182]    02FF:                                       seach1:
[ 183]    02FF: 51                                    push cx
[ 184]    0300: BF 5F 00                              mov di, offset massiv
[ 185]    0303: E8 10 FF                              call seach
[ 186]    0306: 8A 1E A5 00                           mov bl,povtorenie2
[ 187]    030A: 8A 3E A4 00                           mov bh,povtorenie1
[ 188]    030E: 3A FB                                 cmp bh, bl
[ 189]    0310: 7F 05                                 jg swap
[ 190]    0312: 59                                    pop cx
[ 191]    0313: E2 EA                                 loop seach1
[ 192]    0315: E3 0E                                 jcxz exit
[ 193]    0317:                                       swap:
[ 194]    0317: 8A DF                                 mov bl, bh
[ 195]    0319: 88 1E A5 00                           mov povtorenie2, bl
[ 196]    031D: 59                                    pop cx
[ 197]    031E: A3 AA 00                              mov number, ax
[ 198]    0321: E2 DC                                 loop seach1
[ 199]    0323: E3 00                                 jcxz exit
[ 200]    0325:                                       exit:
[ 201]    0325: B4 09                                 mov ah, 09h
[ 202]    0327: BA 5C 00                              lea dx, enter
[ 203]    032A: CD 21                                 int 21h
[ 204]    032C: B4 09                                 mov ah, 09h
[ 205]    032E: BA 54 00                              lea dx, result
[ 206]    0331: CD 21                                 int 21h
[ 207]    0333: 33 C0                                 xor ax,ax
[ 208]    0335: 03 06 AA 00                           add ax, number
[ 209]    0339: 78 02                                 js step2
[ 210]    033B: 79 12                                 jns printf
[ 211]    033D:                                       step2:
[ 212]    033D: F7 D0                                 not ax
[ 213]    033F: 05 01 00                              add ax, 1
[ 214]    0342: 33 C9                                 xor cx, cx
[ 215]    0344: 8B C8                                 mov cx, ax
[ 216]    0346: B4 09                                 mov ah, 09h
[ 217]    0348: BA A8 00                              lea dx, znak
[ 218]    034B: CD 21                                 int 21h
[ 219]    034D: 8B C1                                 mov ax, cx
[ 220]    034F:                                       printf:
[ 221]    034F: BB 0A 00                              mov bx, 10
[ 222]    0352: 33 F6                                 xor si, si
[ 223]    0354: 33 D2                                 xor dx, dx
[ 224]    0356: 33 C9                                 xor cx, cx
[ 225]    0358: E8 DE FE                              call DecToASCII
[ 226]    035B: B4 09                                 mov ah, 09h
[ 227]    035D: BA 9D 00                              lea dx, i+2
[ 228]    0360: CD 21                                 int 21h
[ 229]    0362: B4 4C                                 mov ah, 4ch
[ 230]    0364: CD 21                                 int 21h
[ 231]        :                                       end main
[ 232]        :                                       
[ 233]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 66      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 03      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 51      -   check sum (l.byte)
0013: 03      -   check sum (h.byte)
0014: A5      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 1B      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: A6      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 1B      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
